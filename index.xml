<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>夜莺的BLOG</title>
    <link>https://philomel.github.io/</link>
    <description>Recent content on 夜莺的BLOG</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 23 Jul 2022 21:34:54 -0700</lastBuildDate><atom:link href="https://philomel.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>图床</title>
      <link>https://philomel.github.io/gallery/</link>
      <pubDate>Wed, 25 Jan 2023 08:36:54 -0700</pubDate>
      
      <guid>https://philomel.github.io/gallery/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>随笔</title>
      <link>https://philomel.github.io/essay/</link>
      <pubDate>Wed, 25 Jan 2023 08:36:54 -0700</pubDate>
      
      <guid>https://philomel.github.io/essay/</guid>
      <description>这是随笔</description>
    </item>
    
    <item>
      <title>【Java】关于Spring中MultipartFile的一些认识</title>
      <link>https://philomel.github.io/post/java%E5%85%B3%E4%BA%8Espring%E4%B8%ADmultipartfile%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A4%E8%AF%86/</link>
      <pubDate>Sat, 23 Jul 2022 21:34:54 -0700</pubDate>
      
      <guid>https://philomel.github.io/post/java%E5%85%B3%E4%BA%8Espring%E4%B8%ADmultipartfile%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%A4%E8%AF%86/</guid>
      <description>近来做项目遇到一个问题</description>
    </item>
    
    <item>
      <title>【Android】Native 应用入门-环境搭建</title>
      <link>https://philomel.github.io/post/androidnative-%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 27 Jun 2022 11:34:54 -0700</pubDate>
      
      <guid>https://philomel.github.io/post/androidnative-%E5%BA%94%E7%94%A8%E5%85%A5%E9%97%A8-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>近来尝试了很多可部署开源阅读器项目，但大多体验都不太理想，Calibre-Web​将阅读记录储存在了浏览器缓存中，注定了它对我来说只是个半成品。Reader​网页版，是个不错的选择，但是奈何鄙人不会 Kotlin ，再一个就是本身项目对二次开发好像也不太友好，固放弃。
转念一想，自己开发一个 Android App 不就好了，多的不说，直接开始搞俩哈。
开始 WebView 是不可能 WebView的，这辈子都不可能WebView的。真男人就要干 Native！
开发环境：
SDK ：Android 12L (S) API 32
IDE ：IntelliJ IDEA
测试设备：RedMi K30 S U
首先在 IDEA 中新建项目，选择 Android，没有安装相关 SDK 的朋友，需要先下载安装相关的开发工具包，这里建议 IDEA 设置中开启科学上网。
​​
下载完成后新建一个 Android 项目，选择Phone and Tablet​中的Basic Activity​，我这边选择使用 Java 语言进行开发，项目名叫啥都行
​​
这时候 gradle 会先 sync 一遍，如果你所用的测试平台没有相应的 SDK 就会构建失败，这时候到设置中的Android SDK​中下载相应的软件包，然后通过项目结构​更新以下项目 SDK ，刷新 Gradle，大功告成。
打包运行 可以看到我们当前选择的默认模板已经给我们搭建好了基本的框架，也就是说现在项目可以直接打包运行了。接下来先确保手机处于可以调试的状态，先是打开手机的开发者模式，在开发者选项中打开USB调试​以及通过USB安装​这两项，小米系手机如果到这一步还是不行的话，可以尝试关闭开发者选项中的MIUI优化​。
点击右上角运行​
​​
顺利运行~</description>
    </item>
    
    <item>
      <title>【Java】SiYuan 实现 Epub 阅读</title>
      <link>https://philomel.github.io/post/javasiyuan-%E5%AE%9E%E7%8E%B0-epub-%E9%98%85%E8%AF%BB/</link>
      <pubDate>Mon, 13 Jun 2022 08:50:54 -0700</pubDate>
      
      <guid>https://philomel.github.io/post/javasiyuan-%E5%AE%9E%E7%8E%B0-epub-%E9%98%85%E8%AF%BB/</guid>
      <description>先短暂的解决一下阅读需求，写一个简单的 Java 推送 SiYuan 程序，实现起来也非常简单。
事先准备好 SiYuan 的 Token​
Maven 依赖
&amp;lt;!-- 电子书解析器 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.positiondev.epublib&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;epublib-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${epublib.version}&amp;lt;/version&amp;gt; &amp;lt;exclusions&amp;gt; &amp;lt;exclusion&amp;gt; &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;slf4j-simple&amp;lt;/artifactId&amp;gt; &amp;lt;/exclusion&amp;gt; &amp;lt;/exclusions&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- HTML解析 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;!-- jsoup HTML parser library @ https://jsoup.org/ --&amp;gt; &amp;lt;groupId&amp;gt;org.jsoup&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jsoup&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.11.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- HTML 转 Markdown --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.kotcrab.remark&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;remark&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 如果启动时候日志依赖冲突，就把 epublib​中的日志模块剔除掉
在自己的随便一个 Spring 项目中添加一个接口
public void post2Siyuan(String epubPath) { File file = new File(epubPath); InputStream in = null; try { //从输入流当中读取epub格式文件 EpubReader reader = new EpubReader(); in = new FileInputStream(file); Book book = reader.</description>
    </item>
    
    <item>
      <title>【Telegraph】搭建静态博客/图床</title>
      <link>https://philomel.github.io/post/telegraph%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A/</link>
      <pubDate>Mon, 30 May 2022 15:36:54 -0700</pubDate>
      
      <guid>https://philomel.github.io/post/telegraph%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E5%9B%BE%E5%BA%8A/</guid>
      <description>前排提示，本文使用方法搭建出来的静态博客需要科学上网才能访问。
开始 我们先来看看 Telegraph 是个啥子东东，这是官网的介绍
Telegraph 并不强调内容管理方这一概念，真正做到了「人人都是媒体」。通过 Telegraph 发布的文章，理论上来说不会存在删除的危险，并且由于会产生一个独立的网址链接，所以我们发布的内容可以完全公开在万维网上。我们可以随时随地、匿名发布任何消息，一切不会受到任何监管。「匿名、不受监管」，这应该就是 Telegraph 所强调的自由。
简单来说，只要进入 https://telegra.ph 并编辑本章，点击 Publish ，你的文章就会被匿名地公开到万维网，并且长期保存。 Telegraph 支持上传图片、MarkDown格式。这些操作并不需要你注册 Telegram 账户。
值得注意的是，一旦浏览器清空缓存后，文章将不可再编辑。
接口发布 博文 发布文章的方式一共有两种，一种就是上面提到的直接在网站中编辑内容。另一种就是通过接口的方式发布。
接口文档：https://telegra.ph/api
创建文章接口
参数名 类型 是否必须 access_token String Required title String Required author_name String Optional author_url String Optional content Array of Node Required return_content Boolean, default = false Optional 其中 access_token 通过 createAccount 接口注册获得。
author_url 可以指向任何外链。
content 中的 Node 为类似 HTML 的结构实体组成，如下：
public class HtmlNode { private String tag; private Map&amp;lt;String,String&amp;gt; attrs; private List&amp;lt;Object&amp;gt; children; } 构造 Map ，发送 Http 请求</description>
    </item>
    
    <item>
      <title>【TelegarmBot】与SpringBoot整合</title>
      <link>https://philomel.github.io/post/telegarmbot%E4%B8%8Espringboot%E6%95%B4%E5%90%88/</link>
      <pubDate>Tue, 10 May 2022 10:37:54 -0700</pubDate>
      
      <guid>https://philomel.github.io/post/telegarmbot%E4%B8%8Espringboot%E6%95%B4%E5%90%88/</guid>
      <description>上篇文章已经实现了如何设置 Webhook 并实现 复读 功能，但是仅仅是这样显然是不够的，为了让 Bot 功能更强大，程序更具有健壮性，我们可以将 Bot 与 SpringBoot 整合。
基于 Bot 接口是 HTTP 协议的，所以不管是什么语言，整合起来都是没有什么困难的。比如说 Python ，Telegram 官方甚至提供了SDK。
依赖引入 首先是 springboot-starter &amp;lt;parent&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.4.0&amp;lt;/version&amp;gt; &amp;lt;relativePath/&amp;gt; &amp;lt;/parent&amp;gt; &amp;lt;!--SpringBoot--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Http 使用 kevinsawicki 的包 &amp;lt;!--http调用--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.github.kevinsawicki&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;http-request&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.6&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; JSON工具包也不能落下 &amp;lt;!--JSON转换--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.75&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Webhook 设置 setWebhook Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized Update.</description>
    </item>
    
    <item>
      <title>【TelegramBot】从0开始的Webhook自动应答</title>
      <link>https://philomel.github.io/post/telegrambot%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84webhook%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94/</link>
      <pubDate>Thu, 21 Apr 2022 08:36:54 -0700</pubDate>
      
      <guid>https://philomel.github.io/post/telegrambot%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84webhook%E8%87%AA%E5%8A%A8%E5%BA%94%E7%AD%94/</guid>
      <description>众所周知，TG提供着一个近乎无线容量的个人云空间，同时TG拥有信息、资源聚合的特性，以及功能完备的机器人接口、对开发者友好的开放平台。 鉴于以上，目前我的想法是做一个，可以索引公共信息并且聚合信息同时提供私有云上传/下载服务功能的自动化机器人。 该 @Bot 教程后续通过 Java 平台持续开发。
一共是三个功能点。
解析信息 索引信息 私有云上传/下载 前期工作 创建机器人（@BotFather /newbot）
从 @BotFather 中取得 token
发送 GET 请求，获取 bot 接收到的信息
https://api.telegram.org/bot(token)/getUpdates 设置Webhook（当bot接收到消息后自动发送POST请求到指定url）
先尝试用gmail部署钩子脚本应用
https://api.telegram.org/bot(token)/setwebhook?url=callbackur
谷歌Apps Script管理
基础脚本代码
function doPost(e){ var estringa = JSON.parse(e.postData.contents); var payload = identificar(estringa); var data = { &amp;#34;method&amp;#34;: &amp;#34;post&amp;#34;, &amp;#34;payload&amp;#34;: payload } UrlFetchApp.fetch(&amp;#34;https://api.telegram.org/bot(token)/&amp;#34;, data); } function identificar(e){ if (e.message.text){ var mensaje = { &amp;#34;method&amp;#34;: &amp;#34;sendMessage&amp;#34;, &amp;#34;chat_id&amp;#34;: e.message.chat.id.toString(), &amp;#34;text&amp;#34;: e.message.text, } } else if (e.</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://philomel.github.io/about/</link>
      <pubDate>Sun, 02 Feb 2020 16:23:32 +0800</pubDate>
      
      <guid>https://philomel.github.io/about/</guid>
      <description>这是关于</description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>https://philomel.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://philomel.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
